import numpy as np

# # Проверочная матрица
# H = np.array([
#     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#     [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1],
#     [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0]
# ])

# # Используем numpy для поиска решения уравнения H * x = 0
# from sympy import Matrix
# H_sympy = Matrix(H)
# solution = H_sympy.nullspace()

# # Получаем решение
# codeword = np.array(solution[0]).flatten()  # Берем первое ненулевое решение

# # Проверим, что оно действительно кодовое (H * x = 0)
# # print("Ненулевое кодовое слово:", codeword)
# # check = np.dot(H, codeword) % 2  # Проверим, что H * x = 0 по модулю 2
# # print("Проверка, что оно кодовое (H * x % 2 = 0):", check)
# # codeword=[0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

# # codeword=[0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
#         #  [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
#         #  [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0]
#         #  [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0]
# codeword=[1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0]
# # codeword=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

# if np.sum(np.matmul(codeword, (H.T)) % 2) == 0:
#     print("Ненулевое кодовое слово:", codeword)
# else:
#     print("Кодовое слово хуйня")


from BCJR import BCJRDecoder 
from trellis_repo import get_trellis
from bpsk import bpsk_demodulation
from utils import read_csv
trellis1 = get_trellis('/home/i17m5/GLDPC/trellis_binaries/BCH_MATRIX_N_15_K_11_DEFAULT')

# llr_in=[ 14.45278123,  16.21054051 ,  8.81886308  , 2.50358483 , 90.50822594,
#   15.78551759  , 9.61576327 ,-10.78005435  , 8.21385364,  10.07751358,
#  -14.92368358 ,-10.67865927, -60.92993565 , 10.86770752,  10.95095283,
#    9.97334605]
llr_in = [ 14.03750624 , -8.23050917 ,  4.75319446 , -6.77380879 ,  8.0056226,
 -15.54309568,  15.23208236 ,-14.50848799 , -8.7163923 ,  12.88585297,
   4.52592262 ,-15.4709964  , -2.10949605 ,-16.00285843,  13.81178662]

# llr_in=[ 10.07751358 ,  -2.50358483,  90.50822594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
H_cc = read_csv('/home/i17m5/GLDPC/matricies/BCH_MATRIX_N_15_K_11_DEFAULT.csv')

# llr_in = [154.98671912817557, -93.16231194779564, 67.44386492948027, -33.43374850245638, 75.05669730038835, 157.65607371994352, -33.43374850245638, -68.87386122877703, 68.873861228777031, 33.433748502456382, 1028.5131988413159, 75.05669730038835, -33.43374850245638, 67.44386492948027, 93.162311947795644, -559.6838895008139]
sigma2 =0.15848931924611134
codeword_candidat = bpsk_demodulation(llr_in)

print('codeword_candidat', codeword_candidat)

if np.sum(np.matmul(codeword_candidat, (H_cc.T)) % 2) == 0:
    print("Верное кодовое слово передано:", codeword_candidat)
else:
    print("В декодер передано не верное слово")


decoder = BCJRDecoder(trellis1.edg)
out_llr = decoder.decode(llr_in,sigma2)
print('out_llr', out_llr)
codeword_candidat2 = bpsk_demodulation(out_llr)
if np.sum(np.matmul(codeword_candidat2, (H_cc.T)) % 2) == 0:
    print("Декодер докидировал верное кодовое слово своего кода:", codeword_candidat)
else:
    print("Декодер вернул неверное кодовое")
print('\n\n--------------------------------------------')
a1 = np.array([0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0])

print(np.sum(np.matmul(a1, (H_cc.T)) % 2), np.matmul(a1, (H_cc.T)))

print(np.sum(np.matmul(a1, (H_cc.T))))




